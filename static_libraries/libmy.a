!<arch>
0-isupper.o/    0           0     0     644     218       `
#include "main.h"

/**
* _isupper - checks for uppercase character
* @c: character
*
* Return: 1 if uppercase, 0 if not uppercase
*/

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	return (0);
}
0-memset.o/     0           0     0     644     258       `
#include "main.h"

/**
* _memset - fills the memory with a constant byte
* @s: string
* @b: byte
* @n: byte number
*
* Return: s
*/
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}

	return (s);
}
0-strcat.o/     0           0     0     644     328       `
#include "main.h"

/**
* _strcat - concatenates two strings
* @dest: destination
* @src: source
*
* Return: dest
*/
char *_strcat(char *dest, char *src)
{
	int i;
	int n = 0;

	while (dest[n] != '\0')
	{
		n++;
	}

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[n + i] = src[i];
	}
	dest[n + i] = '\0';

	return (dest);
}
1-isdigit.o/    0           0     0     644     197       `
#include "main.h"

/**
* _isdigit - checks for a digit
* @c: character
*
* Return: 1 if digit, 0 if not digit
*/

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
	return (1);
	}
	return (0);
}

2-strlen.o/     0           0     0     644     214       `
#include "main.h"

/**
* _strlen - returns the lenght of a string
* @s: string
*
* Return: Always 0.
*/

int _strlen(char *s)
{
	int i, length = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		length++;
	}
	return (i);
}
2-strncpy.o/    0           0     0     644     318       `
#include "main.h"

/**
* _strncpy - copies a string
* @dest: destination
* @src: source
* @n: bytes from src
*
* Return: dest
*/
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}

	for (; i < n; i++)
	{
		dest[i] = '\0';
	}

	return (dest);
}
3-islower.o/    0           0     0     644     195       `
#include "main.h"

/**
* _islower - checks for lowercase character
*
* @c: character
*
* Return: Always 0.
*/

int _islower(int c)

{
	if (c > 'a' && c < 'z')
		return (1);
	else
		return (0);
}

3-puts.o/       0           0     0     644     226       `
#include "main.h"

/**
* _puts - prints a string followed by a new line
* @str: string
*
* Return: Always 0.
*/
void _puts(char *str)
{
	int i = 0;

	for (; str[i] != '\0';)
	{
		_putchar(str[i]);
		i++;
	}
	_putchar('\n');
}
3-strcmp.o/     0           0     0     644     230       `
#include "main.h"

/**
* _strcmp - compares two strings
* @s1: first string
* @s2: second string
*
* Return: dest
*/
int _strcmp(char *s1, char *s2)
{
	while (*s1 && *s2 && *s1 == *s2)
	{
		s1++;
		s2++;
	}
	return (*s1 - *s2);
}
3-strspn.o/     0           0     0     644     379       `
#include "main.h"
/**
* _strspn - gets the length of a prefix substring
* @s: string
* @accept: source
*
* Return: 0
*/
unsigned int _strspn(char *s, char *accept)
{
	int i;
	unsigned int j = 0;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
			{
				j++;
				break;
			}
		else if (accept[i + 1] == '\0')
			return (j);
		}
			s++;
	}

	return (j);
}

4-isalpha.o/    0           0     0     644     239       `
#include "main.h"

/**
* _isalpha - checks for alphabetic character
*
* @c: character
*
* Return: Always 0.
*/

int _isalpha(int c)
{
	if (c > 'a' && c < 'z')
		return (1);
	else if (c > 'A' && c < 'Z')
		return (1);
	else
		return (0);
}

6-abs.o/        0           0     0     644     216       `
#include "main.h"

/**
* _abs - computes the absolute value of an integer
*
* @r: number
*
* Return: Always 0.
*/

int _abs(int r)
{
	if (r < 0)
	{
	return (-r);
	}
	{
	if (r > 0)
	return (r);
	else
	return (0);
}
}
9-strcpy.o/     0           0     0     644     294       `
#include "main.h"

/**
* _strcpy - copies string pointed by src to dest, inlcuding \0
* @dest: destination
* @src: source
*
* Return: dest
*/
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; *(src + i) != '\0'; i++)
	{
		dest[i] = *(src + i);
	}
	dest[i] = '\0';

	return (dest);
}
_putchar.o/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

